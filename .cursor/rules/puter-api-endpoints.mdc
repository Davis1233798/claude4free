---
description:
globs:
alwaysApply: false
---
Rule Name: puter-api-endpoints
Description: 
# Puter API Endpoints and Model Mappings

## Puter API 端點配置

### 基礎 API 端點
```javascript
const PUTER_API_BASE = 'https://api.puter.com';

// 主要端點
const ENDPOINTS = {
  CHAT: '/ai/chat',
  TEXT_TO_SPEECH: '/ai/text-to-speech',
  TEXT_TO_IMAGE: '/ai/text-to-image',
  IMAGE_RECOGNITION: '/ai/image-recognition',
  EMBEDDINGS: '/ai/embeddings'
};
```

## 模型映射表

### OpenAI 系列模型
```javascript
const OPENAI_MODELS = {
  'gpt-4o': 'gpt-4o',
  'gpt-4o-mini': 'gpt-4o-mini',
  'gpt-4.5-preview': 'gpt-4.5-preview',
  'o1': 'o1',
  'o1-mini': 'o1-mini',
  'o3-mini': 'o3-mini'
};
```

### Anthropic Claude 系列模型
```javascript
const ANTHROPIC_MODELS = {
  'claude-3-5-sonnet': 'claude-3-5-sonnet',
  'claude-3-7-sonnet': 'claude-3-7-sonnet',
  'claude-3-opus': 'claude-3-opus',
  'claude-3-haiku': 'claude-3-haiku'
};
```

### Google Gemini 系列模型
```javascript
const GOOGLE_MODELS = {
  'gemini-2.0-flash': 'gemini-2.0-flash',
  'gemini-1.5-flash': 'gemini-1.5-flash',
  'gemini-1.5-pro': 'gemini-1.5-pro'
};
```

### Meta Llama 系列模型
```javascript
const META_MODELS = {
  'llama-3.1-405b': 'llama-3.1-405b',
  'llama-3.1-70b': 'llama-3.1-70b',
  'llama-3.1-8b': 'llama-3.1-8b'
};
```

### Mistral 系列模型
```javascript
const MISTRAL_MODELS = {
  'mistral-large': 'mistral-large',
  'mistral-medium': 'mistral-medium',
  'mistral-small': 'mistral-small'
};
```

### DeepSeek 系列模型
```javascript
const DEEPSEEK_MODELS = {
  'deepseek-v3': 'deepseek-v3',
  'deepseek-coder': 'deepseek-coder',
  'deepseek-chat': 'deepseek-chat'
};
```

### xAI Grok 系列模型
```javascript
const XAI_MODELS = {
  'grok-3-beta': 'x-ai/grok-3-beta',
  'grok-2': 'x-ai/grok-2'
};
```

## 完整的 API 調用函數

### 統一的 API 調用函數
```javascript
class PuterAPIClient {
  constructor(baseUrl = 'https://api.puter.com') {
    this.baseUrl = baseUrl;
  }

  async callAPI(endpoint, data, options = {}) {
    const url = `${this.baseUrl}${endpoint}`;
    
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        throw new Error(`API 調用失敗: ${response.status} ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error(`Puter API 錯誤 (${endpoint}):`, error);
      throw error;
    }
  }

  // 聊天功能
  async chat(message, model = 'gpt-4o') {
    return await this.callAPI('/ai/chat', {
      message: message,
      model: model,
      stream: false
    });
  }

  // 流式聊天
  async chatStream(message, model = 'gpt-4o') {
    return await this.callAPI('/ai/chat', {
      message: message,
      model: model,
      stream: true
    });
  }

  // 圖片識別
  async recognizeImage(imageBase64, prompt, model = 'gpt-4o') {
    return await this.callAPI('/ai/image-recognition', {
      image: imageBase64,
      prompt: prompt,
      model: model
    });
  }

  // 文字轉語音
  async textToSpeech(text, options = {}) {
    return await this.callAPI('/ai/text-to-speech', {
      text: text,
      voice: options.voice || 'zh-TW-HsiaoChenNeural',
      speed: options.speed || 1.0,
      pitch: options.pitch || 0
    });
  }

  // 文字轉圖片
  async textToImage(prompt, options = {}) {
    return await this.callAPI('/ai/text-to-image', {
      prompt: prompt,
      size: options.size || '1024x1024',
      style: options.style || 'vivid',
      quality: options.quality || 'standard'
    });
  }

  // 文字嵌入
  async getEmbeddings(text, model = 'text-embedding-3-small') {
    return await this.callAPI('/ai/embeddings', {
      text: text,
      model: model
    });
  }
}
```

## 在 Cloudflare Workers 中的使用

### Worker 腳本示例
```javascript
// 引入 Puter API 客戶端
import { PuterAPIClient } from './puter-client.js';

export default {
  async fetch(request, env, ctx) {
    // CORS 處理
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    };

    if (request.method === 'OPTIONS') {
      return new Response(null, { headers: corsHeaders });
    }

    try {
      const url = new URL(request.url);
      
      if (url.pathname === '/api/chat' && request.method === 'POST') {
        return await handleChatRequest(request, corsHeaders);
      }
      
      if (url.pathname === '/health') {
        return new Response(JSON.stringify({ status: 'ok' }), {
          headers: { 'Content-Type': 'application/json', ...corsHeaders }
        });
      }

      return new Response('Not Found', { 
        status: 404, 
        headers: corsHeaders 
      });
    } catch (error) {
      return new Response(JSON.stringify({ 
        error: error.message || '內部伺服器錯誤' 
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json', ...corsHeaders }
      });
    }
  }
};

async function handleChatRequest(request, corsHeaders) {
  const formData = await request.formData();
  const message = formData.get('message');
  const model = formData.get('model') || 'gpt-4o';
  const functionType = formData.get('function') || 'chat';
  
  const puterClient = new PuterAPIClient();
  
  try {
    let response;
    
    switch (functionType) {
      case 'chat':
        response = await puterClient.chat(message, model);
        return new Response(JSON.stringify({
          text: response.content || response.message,
          success: true
        }), {
          headers: { 'Content-Type': 'application/json', ...corsHeaders }
        });
        
      case 'image-recognition':
        const imageFile = formData.get('image');
        if (!imageFile) {
          throw new Error('未提供圖片文件');
        }
        
        const imageBuffer = await imageFile.arrayBuffer();
        const imageBase64 = Buffer.from(imageBuffer).toString('base64');
        
        response = await puterClient.recognizeImage(imageBase64, message, model);
        return new Response(JSON.stringify({
          text: response.description || response.content,
          success: true
        }), {
          headers: { 'Content-Type': 'application/json', ...corsHeaders }
        });
        
      case 'text-to-speech':
        const language = formData.get('tts-language') || 'zh-TW';
        response = await puterClient.textToSpeech(message, { voice: getVoiceForLanguage(language) });
        return new Response(JSON.stringify({
          text: '語音已生成',
          audioUrl: response.url,
          success: true
        }), {
          headers: { 'Content-Type': 'application/json', ...corsHeaders }
        });
        
      case 'text-to-image':
        const imageSize = formData.get('img-size') || '512x512';
        const imageStyle = formData.get('img-style') || 'vivid';
        
        response = await puterClient.textToImage(message, { 
          size: imageSize, 
          style: imageStyle 
        });
        return new Response(JSON.stringify({
          text: '圖片已生成',
          imageUrl: response.url,
          success: true
        }), {
          headers: { 'Content-Type': 'application/json', ...corsHeaders }
        });
        
      default:
        throw new Error(`不支援的功能類型: ${functionType}`);
    }
  } catch (error) {
    console.error('Puter API 調用錯誤:', error);
    throw new Error(`${functionType} 功能調用失敗: ${error.message}`);
  }
}

function getVoiceForLanguage(language) {
  const voiceMap = {
    'zh-TW': 'zh-TW-HsiaoChenNeural',
    'zh-CN': 'zh-CN-XiaoxiaoNeural',
    'en-US': 'en-US-JennyNeural',
    'ja-JP': 'ja-JP-NanamiNeural',
    'ko-KR': 'ko-KR-SunHiNeural'
  };
  
  return voiceMap[language] || voiceMap['zh-TW'];
}
```

## 前端整合示例

### AMP 表單提交處理
```html
<form method="post" 
      action-xhr="https://claude4free-api.davis1233798.workers.dev/api/chat" 
      on="submit:AMP.setState({appState: {loading: true, error: ''}});
          submit-success:handleAPIResponse(event.response);
          submit-error:AMP.setState({appState: {loading: false, error: '請求失敗，請重試'}})">
  
  <input type="hidden" name="function" [value]="appState.currentFunction || 'chat'">
  <input type="hidden" name="model" [value]="appState.selectedModel">
  
  <!-- 其他表單字段 -->
</form>
```

### JavaScript 處理回應
```javascript
function handleAPIResponse(response) {
  if (response.success) {
    if (response.audioUrl) {
      // 處理語音回應
      playAudio(response.audioUrl);
    } else if (response.imageUrl) {
      // 處理圖片回應
      displayImage(response.imageUrl);
    } else {
      // 處理文字回應
      displayMessage(response.text);
    }
  } else {
    displayError(response.error || '未知錯誤');
  }
}
```

## 錯誤碼對照表

```javascript
const ERROR_CODES = {
  400: '請求參數錯誤',
  401: '認證失敗',
  403: '無權限訪問',
  404: '端點不存在',
  429: '請求頻率過高',
  500: '伺服器內部錯誤',
  502: '上游服務不可用',
  503: '服務暫時不可用'
};

function getErrorMessage(statusCode, defaultMessage = '未知錯誤') {
  return ERROR_CODES[statusCode] || defaultMessage;
}
```

## 監控和日誌

### API 調用監控
```javascript
class PuterAPIMonitor {
  constructor() {
    this.metrics = {
      totalCalls: 0,
      successCalls: 0,
      errorCalls: 0,
      avgResponseTime: 0
    };
  }

  async monitoredCall(apiCall) {
    const startTime = Date.now();
    this.metrics.totalCalls++;

    try {
      const result = await apiCall();
      this.metrics.successCalls++;
      
      const responseTime = Date.now() - startTime;
      this.updateAvgResponseTime(responseTime);
      
      console.log(`API 調用成功 - 耗時: ${responseTime}ms`);
      return result;
    } catch (error) {
      this.metrics.errorCalls++;
      console.error('API 調用失敗:', error);
      throw error;
    }
  }

  updateAvgResponseTime(newTime) {
    this.metrics.avgResponseTime = 
      (this.metrics.avgResponseTime * (this.metrics.totalCalls - 1) + newTime) / 
      this.metrics.totalCalls;
  }

  getMetrics() {
    return {
      ...this.metrics,
      successRate: this.metrics.successCalls / this.metrics.totalCalls * 100
    };
  }
}
```
