---
description:
globs:
alwaysApply: false
---
Rule Name: puter-ai-models-snippets
Description: 
# Puter AI Models Code Snippets

## Puter.js AI API 集成指南

Puter.js 提供免費、無限制的 AI API 接口，支援多種 AI 模型和功能。

## 基本設置

### HTML 引入
```html
<script src="https://js.puter.com/v2/"></script>
```

### 基本配置
```javascript
// 無需 API key，直接使用
const response = await puter.ai.chat("Your prompt here");
```

## 支援的 AI 模型

### OpenAI 模型
```javascript
// GPT-4o
const response = await puter.ai.chat("Hello", {
  model: 'gpt-4o'
});

// GPT-4o Mini
const response = await puter.ai.chat("Hello", {
  model: 'gpt-4o-mini'
});

// GPT-4.5 Preview
const response = await puter.ai.chat("Hello", {
  model: 'gpt-4.5-preview'
});

// o1
const response = await puter.ai.chat("Hello", {
  model: 'o1'
});

// o1 Mini
const response = await puter.ai.chat("Hello", {
  model: 'o1-mini'
});

// o3 Mini (最新)
const response = await puter.ai.chat("Hello", {
  model: 'o3-mini'
});
```

### Anthropic Claude 模型
```javascript
// Claude 3.5 Sonnet
const response = await puter.ai.chat("Hello", {
  model: 'claude-3-5-sonnet'
});

// Claude 3.7 Sonnet
const response = await puter.ai.chat("Hello", {
  model: 'claude-3-7-sonnet'
});
```

### Google Gemini 模型
```javascript
// Gemini 2.0 Flash
const response = await puter.ai.chat("Hello", {
  model: 'gemini-2.0-flash'
});

// Gemini 1.5 Flash
const response = await puter.ai.chat("Hello", {
  model: 'gemini-1.5-flash'
});
```

### Meta Llama 模型
```javascript
// Llama 3.1 405B
const response = await puter.ai.chat("Hello", {
  model: 'llama-3.1-405b'
});

// Llama 3.1 70B
const response = await puter.ai.chat("Hello", {
  model: 'llama-3.1-70b'
});
```

### Mistral 模型
```javascript
// Mistral Large
const response = await puter.ai.chat("Hello", {
  model: 'mistral-large'
});

// Mistral Medium
const response = await puter.ai.chat("Hello", {
  model: 'mistral-medium'
});
```

### DeepSeek 模型
```javascript
// DeepSeek V3
const response = await puter.ai.chat("Hello", {
  model: 'deepseek-v3'
});

// DeepSeek Coder
const response = await puter.ai.chat("Hello", {
  model: 'deepseek-coder'
});
```

### xAI Grok 模型
```javascript
// Grok Beta
const response = await puter.ai.chat("Hello", {
  model: 'x-ai/grok-3-beta'
});
```

## AI 功能使用示例

### 1. 基本聊天功能
```javascript
async function basicChat() {
  try {
    const response = await puter.ai.chat("解釋什麼是人工智能", {
      model: 'gpt-4o'
    });
    console.log(response.message.content[0].text);
  } catch (error) {
    console.error('聊天錯誤:', error);
  }
}
```

### 2. 流式回應
```javascript
async function streamingChat() {
  try {
    const response = await puter.ai.chat("寫一首關於AI的詩", {
      model: 'claude-3-5-sonnet',
      stream: true
    });
    
    for await (const chunk of response) {
      if (chunk?.text) {
        console.log(chunk.text);
      }
    }
  } catch (error) {
    console.error('流式聊天錯誤:', error);
  }
}
```

### 3. 圖片識別
```javascript
async function imageRecognition(imageFile) {
  try {
    const response = await puter.ai.chat([
      { type: 'text', text: '描述這張圖片的內容' },
      { type: 'image', image: imageFile }
    ], {
      model: 'gpt-4o'
    });
    
    return response.message.content[0].text;
  } catch (error) {
    console.error('圖片識別錯誤:', error);
  }
}
```

### 4. 文字轉語音 (Text-to-Speech)
```javascript
async function textToSpeech(text) {
  try {
    const response = await puter.ai.textToSpeech(text, {
      voice: 'zh-TW-HsiaoChenNeural', // 中文語音
      speed: 1.0,
      pitch: 0
    });
    
    // 返回音頻 URL
    return response.url;
  } catch (error) {
    console.error('語音生成錯誤:', error);
  }
}
```

### 5. 文字轉圖片 (Text-to-Image)
```javascript
async function textToImage(prompt) {
  try {
    const response = await puter.ai.textToImage(prompt, {
      model: 'dalle-3',
      size: '1024x1024',
      quality: 'standard',
      style: 'vivid'
    });
    
    // 返回圖片 URL
    return response.url;
  } catch (error) {
    console.error('圖片生成錯誤:', error);
  }
}
```

### 6. 圖片編輯
```javascript
async function editImage(imageFile, prompt) {
  try {
    const response = await puter.ai.editImage({
      image: imageFile,
      prompt: prompt,
      size: '1024x1024'
    });
    
    return response.url;
  } catch (error) {
    console.error('圖片編輯錯誤:', error);
  }
}
```

## 完整的多功能 AI 助手示例

```javascript
class PuterAIAssistant {
  constructor(defaultModel = 'gpt-4o') {
    this.defaultModel = defaultModel;
  }

  async chat(message, options = {}) {
    return await puter.ai.chat(message, {
      model: options.model || this.defaultModel,
      stream: options.stream || false,
      ...options
    });
  }

  async analyzeImage(imageFile, question) {
    return await puter.ai.chat([
      { type: 'text', text: question },
      { type: 'image', image: imageFile }
    ], {
      model: 'gpt-4o'
    });
  }

  async generateSpeech(text, language = 'zh-TW') {
    const voiceMap = {
      'zh-TW': 'zh-TW-HsiaoChenNeural',
      'en-US': 'en-US-JennyNeural',
      'ja-JP': 'ja-JP-NanamiNeural'
    };

    return await puter.ai.textToSpeech(text, {
      voice: voiceMap[language] || voiceMap['zh-TW']
    });
  }

  async generateImage(prompt, style = 'vivid') {
    return await puter.ai.textToImage(prompt, {
      size: '1024x1024',
      style: style,
      quality: 'standard'
    });
  }

  async processMultiModal(text, imageFile = null) {
    const content = [{ type: 'text', text: text }];
    
    if (imageFile) {
      content.push({ type: 'image', image: imageFile });
    }

    return await this.chat(content, { model: 'gpt-4o' });
  }
}

// 使用示例
const ai = new PuterAIAssistant();

// 基本聊天
const chatResponse = await ai.chat("你好，請介紹一下你自己");

// 圖片分析
const imageAnalysis = await ai.analyzeImage(imageFile, "這張圖片中有什麼？");

// 語音生成
const audioUrl = await ai.generateSpeech("這是一個語音測試", 'zh-TW');

// 圖片生成
const imageUrl = await ai.generateImage("一隻可愛的小貓在花園裡玩耍");
```

## 錯誤處理最佳實踐

```javascript
async function robustAICall(prompt, options = {}) {
  const maxRetries = 3;
  let attempt = 0;

  while (attempt < maxRetries) {
    try {
      const response = await puter.ai.chat(prompt, options);
      return response;
    } catch (error) {
      attempt++;
      console.warn(`AI 調用失敗 (嘗試 ${attempt}/${maxRetries}):`, error.message);
      
      if (attempt >= maxRetries) {
        throw new Error(`AI 服務在 ${maxRetries} 次嘗試後仍然失敗: ${error.message}`);
      }
      
      // 等待一段時間後重試
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
    }
  }
}
```

## 注意事項

### 免費使用限制
- 免費版本會將數據用於模型訓練
- 如需保護隱私，請考慮付費版本
- 無 API key 限制，但建議合理使用

### 性能優化
- 使用流式回應處理長文本
- 批量處理多個請求時添加延遲
- 實施錯誤重試機制

### 安全考量
- 驗證用戶輸入
- 避免敏感信息洩露
- 實施適當的速率限制

## 與現有項目整合

在 Claude4Free 項目中的整合示例：

```javascript
// 在 Cloudflare Workers 中使用
export default {
  async fetch(request, env) {
    if (request.method === 'POST') {
      const formData = await request.formData();
      const message = formData.get('message');
      const model = formData.get('model');
      
      try {
        // 使用 Puter AI API 的替代實現
        const response = await callPuterAPI('/ai/chat', {
          message: message,
          model: model
        });
        
        return new Response(JSON.stringify({
          text: response.content,
          success: true
        }), {
          headers: { 'Content-Type': 'application/json' }
        });
      } catch (error) {
        return new Response(JSON.stringify({
          error: error.message,
          success: false
        }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    }
  }
};

async function callPuterAPI(endpoint, data) {
  // 實現 Puter API 調用邏輯
  const response = await fetch(`https://api.puter.com${endpoint}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  });
  
  if (!response.ok) {
    throw new Error(`API 調用失敗: ${response.status}`);
  }
  
  return await response.json();
}
```
